install.packages("swirl")
library("swirl")
install_course_zip("/Users/rtseinstein/Desktop/RStudio-1.1.453.dmg",multi=FALSE)
install_course("/Users/rtseinstein/Desktop/RStudio-1.1.453.dmg",multi=FALSE)
install_course_zip("/Users/rtseinstein/Desktop/14_310x_Intro_to_R.zip”,multi=FALSE")
install_course_zip("/Users/rtseinstein/Desktop/14_310x_Intro_to_R.zip”,multi=FALSE)
install_course_zip("Users/rtseinstein/Desktop/14_310x_Intro_to_R.zip”,multi=FALSE")
install_course_zip("/Users/rtseinstein/Desktop/14_310x_Intro_to_R.zip”,multi=FALSE)
sadas
sd
ad
as
as
ad
ad
library("swirl")
install_course_zip("/Users/rtseinstein/14_310x_Intro_to_R.zip",multi=FALSE)
swirl()
file.exists("/Users/rtseinstein/14_310x_Intro_to_R.zip"")
file.exists("/Users/rtseinstein/14_310x_Intro_to_R.zip")
file.exists("Users/rtseinstein/Desktop/14_310x_Intro_to_R.zip")
file.exists("/Users/rtseinstein/Desktop/14_310x_Intro_to_R.zip")
file.exists("Users/rtseinstein/Desktop/14_310x_Intro_to_R_.zip")
file.exists("/Users/rtseinstein/Desktop/14_310x_Intro_to_R_.zip")
install_course_zip("/Users/rtseinstein/Desktop/14_310x_Intro_to_R_.zip",multi=FALSE)
swirl()
6+5
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2 + 100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
c(1,2,3,4)+c(0,10,1000)
(z*2 + 100)
(z*2 + 1000)
z*2 + 1000
my_div
library("swirl")
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getpwd()
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
?file.rename
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest2.R")
file.path("mytest3.R")
?file.path
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir1","testdir2"),TRUE,TRUE,"0777")
dir.create(file.path("testdir1","testdir2"),recursive=TRUE)
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
unlink("testdir2",recursive = TRUE)
setwd("old.dir")
setwd(old.dir)
unlink("testdir",recursive = TRUE)
1:20
pi:10
15:1
?":"
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
seq(1,length(my_seq))
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
system("python Untitled.py")
library(R6)
SimpleObject <- R6Class("SimpleObject",
public = list(
# these are all optional
attribute = NULL,
# use an initialize if you need to set things up
initialize = function() {},
any_function = function() {},
print = function() { cat("") },
# use finalize if you need to dispose of things or clear up
finalize = function() {}
)
)
does_nothing <- SimpleObject$new()
# what sort of object is this?
# what kind of base type is this?
class(SimpleObject)
class(does_nothing)
typeof(does_nothing)
typeof(SimpleObject)
source("7_object.R")
obj1 <- SimpleObject$new()
class(obj1)
typeof(obj1)
source("7_object.R")
obj1 <- SimpleObject$new()
obj2 <- SimpleObject$new()
obj3 <- SimpleObject$new()
obj4 <- SimpleObject$new()
obj5 <- SimpleObject$new()
object_list = c(obj1,obj2,obj3,obj4,obj5)
fetch1 <- object_list[1]
class(fetch1)
fetch1_plus <- object_list[[1]]
class(fetch1_plus)
object_list
obj1
object_list[[1]]
v<- c(1,2,3,4)
v
l <- list(1,2,3,4)
l
l[1]
l[[1]]
list1 <- list(100:130)
list[1]
list1[1]
source("7_object.R")
obj1 <- SimpleObject$new()
obj2 <- SimpleObject$new()
obj3 <- SimpleObject$new()
obj4 <- SimpleObject$new()
obj5 <- SimpleObject$new()
object_list = list(obj1,obj2,obj3,obj4,obj5)
fetch1 <- object_list[1]
class(fetch1)
fetch1_plus <- object_list[[1]]
class(fetch1_plus)
source("7_object.R")
obj1 <- SimpleObject$new()
obj2 <- SimpleObject$new()
obj3 <- SimpleObject$new()
obj4 <- SimpleObject$new()
obj5 <- SimpleObject$new()
object_list = c(obj1,obj2,obj3,obj4,obj5)
fetch1 <- object_list[1]
class(fetch1)
fetch1_plus <- object_list[[1]]
class(fetch1_plus)
Yard <- R6Class("Yard",
public = list(
yard_contains = NULL,
object_name = "Yard",
# what do you do everytime you make a new object?
initialize = function(alist) {
self$yard_contains = alist
},
activate = function(){
for (i in self$yard_contains){
#print(i$object_name)
i$activate(self$yard_contains)
}
}
)
)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Desktop/DAV/tournament/Tournament_updated3.0/folder2")  #Change this directory to where your files are stored
myScriptName <- "myDefector.R"
numberOfrounds <- sample(700:1000, 1) #Value for number of rounds is randomly picked in the range of 700:1000
x = c("cooperate","cooperate","defect","defect")
y = c("cooperate","defect","cooperate","defect")
z = c(4,0,5,2)
w = c(4,5,0,2)
book <- data.frame("id1"=integer(),"id2"=integer(),"tradeno"=integer(),"bid1"=character(),"bid2"=character(), "payoff1"=integer(), "payoff2"=integer())
df <- data.frame("bid1"=x,"bid2"=y, payoff1 = z, payoff2 = w)
fileNames <- list.files()
scriptNames <- fileNames[grep(pattern = "\\.R$", x = fileNames)]
print(scriptNames)
scriptNames <- scriptNames[-grep(pattern = myScriptName, x = scriptNames)]
print(scriptNames)
agent_list <- list()
playing_script_names <- c()
for(i in 1:length(scriptNames)) {
agentCode <- dget(scriptNames[i])
print(agentCode)
agent_list[[i]] <- agentCode$new()
playing_script_names[i] <- scriptNames[i]
}
# Test agents for functionality
# Remove non-functional agents
numberOfStudentAgents <- length(agent_list)
numberOfMyAgents <- (numberOfStudentAgents %% 2) + 2
for (i in (numberOfStudentAgents+1):(numberOfStudentAgents+numberOfMyAgents)) {
myAgentCode <- dget(myScriptName)
agent_list[[i]] <- myAgentCode$new()
playing_script_names[i] <- myScriptName
}
numberOfTotalAgents <- length(agent_list)
agent_ids <- sample(seq(from = 1, to = numberOfTotalAgents, by = 1))
agent_list <- agent_list[agent_ids]
playing_script_names <- playing_script_names[agent_ids]
for(i in 1:numberOfTotalAgents) {
cat(playing_script_names[i], "has the ID of", i, "\n")
}
agents_info <- data.frame("agent_id"=c(1:numberOfTotalAgents), "agent_file_name"=playing_script_names, "net_payoff"=NA)
# matches are paired opportunities for agents to compete
matches <- c()
for (i in 1:numberOfrounds) {
# There will be an even number of agents, up to about 40
# each agent has a unique id
id_list<-1:numberOfTotalAgents
# shuffle the list in place
shuffle <- sample(id_list)
while (length(shuffle) > 0) {
# get two agents off the list
el1 <- shuffle[[1]]
el2 <- shuffle[[2]]
# remove two agents off the front of the list
shuffle <- shuffle[-1]
shuffle <- shuffle[-1]
# add your contest to the end of the match list
matches[[length(matches)+1]] <- c(el1,el2)
}
}
# Run the Tournament
# Create the payoff table
x <- length(matches)
# matches is a list of list
# The outer list is a list of contests
# The inner list is a list of two agents
for (i in 1:x) {
# find the first contest
# get the list, not the slice
contest <- matches[[i]]
# get the ideas
id1 <- contest[[1]]
id2 <- contest[[2]]
# get the agents
agent1 = agent_list[[id1]]
agent2 = agent_list[[id2]]
# set the agent ids
agent1$set_id(id1)
agent2$set_id(id2)
# set the opponent number
agent1$set_opponent_id(id2)
agent2$set_opponent_id(id1)
# set the greetings
agent1$set_greeting()
agent2$set_greeting()
# get the greetings
greeting1 <- agent1$greeting
greeting2 <- agent2$greeting
#send the greetings
agent1$receive_greeting(greeting2)
agent2$receive_greeting(greeting1)
# set the round number
agent1$set_round(i)
agent2$set_round(i)
# pass the tournament book
agent1$set_book(book)
agent2$set_book(book)
# get the bids
agent1$get_bid()
agent2$get_bid()
mybid1 <- agent1$bid
mybid2 <- agent2$bid
# Run the Tournament
# record the transaction
payoffs <-subset(df, bid1 == mybid1 & bid2 == mybid2)
payoff1 <- payoffs$payoff1
payoff2 <- payoffs$payoff2
book = rbind(book,data.frame("id1"=id1,"id2"=id2,"tradeno"= i,"bid1"=mybid1,"bid2"=mybid2,"payoff1"=payoff1,"payoff2"=payoff2))
}
total_payoff <- 0
for(i in 1:numberOfTotalAgents) {
payoff <- sum((subset(book, i==id1))[["payoff1"]])+sum((subset(book, i==id2))[["payoff2"]])
cat("Payoff for Agent", i, "(",playing_script_names[i],") is", payoff, "\n")
total_payoff <- total_payoff + payoff
agents_info[i,"net_payoff"] <- payoff
}
write.csv2(book,file="bid_register.csv")
write.csv2(agents_info,file="agents_info.csv")
agents_info[with(agents_info, order(-net_payoff)), ]
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Desktop/DAV/India_Geodata/india-census/")
library(tidyverse)
library(rgdal)        #Geospatial library for R
library(ggplot2)
library(wesanderson)
library(RColorBrewer)
library(ggmap)
maindir="~/Desktop/DAV/India_Geodata"
ind_adm_0= readOGR(paste(maindir,'/IND_adm',sep=''),'IND_adm0')
oundaries:
maindir="~/Desktop/DAV/India_Geodata"
#boundaries:
maindir="~/Desktop/DAV/India_Geodata"
ind_adm_0= readOGR(paste(maindir,'/IND_adm',sep=''),'IND_adm0')
ind_adm_2= readOGR(paste(maindir,'/IND_adm',sep=''),'IND_adm2')
mcd_clipped= ind_mcd[ind_adm_0,]
ind_mcd= readOGR(paste(maindir,'/mcd_india_shpfile',sep=''),'export')
#plotting them together
#plot(ind_adm_0)
#plot(ind_mcd, col=rgb(0.8,0,0), add=TRUE)
#I notice there are McDs here that lie outside indian boundary. So I clip the data:
bbox(ind_adm_0)
mcd_clipped= ind_mcd[ind_adm_0,]
#Plotting with clipped data
plot(ind_adm_0)
plot(ind_adm_2,add=TRUE)
plot(mcd_clipped, col=rgb(0.8,0,0), add=TRUE)
ind_adm_2= readOGR(paste(maindir,'/IND_adm',sep=''),'IND_adm2')
ind_mcd= readOGR(paste(maindir,'/mcd_india_shpfile',sep=''),'export')
mcd_clipped= ind_mcd[ind_adm_0,]
plot(ind_adm_0)
plot(ind_adm_2,add=TRUE)
plot(mcd_clipped, col=rgb(0.8,0,0), add=TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Desktop/DAV/India_Geodata/india-census/")
library(tidyverse)
library(rgdal)        #Geospatial library for R
library(ggplot2)
library(wesanderson)
library(RColorBrewer)
library(ggmap)
ind_waterlines=readOGR(paste(maindir,'/IND_wat',sep=''),'IND_water_lines_dcw')
ind_waterareas=readOGR(paste(maindir,'/IND_wat',sep=''),'IND_water_areas_dcw')
ggplot() + geom_polygon(data=ind_adm_0,aes(x=long, y=lat,group=group), fill='white', col=rgb(0,0,0.3,alpha = 0.3)) +
geom_path(data=ind_waterlines, aes(x=long, y=lat,group=group), col=rgb(0,0,0.5,alpha=0.5)) +
labs(title= 'Indian Water Line and Areas', x='', y='') +
coord_fixed() +
theme_void()
setwd("~/Documents/GitHub/dav_final")
knitr::opts_chunk$set(echo = TRUE)
#libraries
library(tidyverse)
library(rgdal)
library(ggplot2)
library(wesanderson)
library(RColorBrewer)
library(ggmap)
#graphic1
YouthLiteracy=read.csv('/GenderStatsData/graphic1/youth_literacy_15_24.csv',hheader = TRUE, sep=',')
YouthLiteracy=read.csv('/GenderStatsData/graphic1/youth_literacy_15_24.csv',header = TRUE, sep=',')
YouthLiteracy=read.csv('GenderStatsData/graphic1/youth_literacy_15_24.csv',header = TRUE, sep=',')
YouthLiteracy=read.csv('GenderStatsData/graphic1/youth_literacy_15_24.csv',header = TRUE, sep=',')
head(YouthLiteracy)
YouthLiteracy.unique(YouthLiteracy$Country)
countries= unique(YouthLiteracy$Country)
countries
length(countries)
min(YouthLiteracy$Year)
YouthLiteracy[YouthLiteracy$Value]
YouthLiteracy(YouthLiteracy$Value)
female_lit_1995= YouthLiteracy[(YouthLiteracy$Year==1995)&(YouthLiteracy$Sex=='Female'),]
female_lit_1995
female_lit_1995_avg=mean(female_lit_1995$Value)
female_lit_1995_avg
#female literacy in 2018
female_lit_2018= YouthLiteracy[(YouthLiteracy$Year==2018)&(YouthLiteracy$Sex=='Female'),]
female_lit_2018_avg=mean(female_lit_1995$Value)
View(female_lit_1995)
View(female_lit_2018)
max(YouthLiteracy$Year)
#female literacy in 2016
female_lit_2016= YouthLiteracy[(YouthLiteracy$Year==2016)&(YouthLiteracy$Sex=='Female'),]
female_lit_2016_avg=mean(female_lit_2016$Value)
mean(YouthLiteracy[(YouthLiteracy$Year==min(YouthLiteracy$Year))&(YouthLiteracy$Sex=='Female'),]$Value)
mortality=read.csv('GenderStatsData/graphic1/maternal_mortality.csv',header = TRUE, sep=',')
mortality=read.csv('GenderStatsData/graphic1/maternal_mortality.csv',header = TRUE, sep=',')
#in 1995
mean(YouthLiteracy[(YouthLiteracy$Year==1995)&(YouthLiteracy$Sex=='Female'),]$Value)
#in 2016
mean(YouthLiteracy[(YouthLiteracy$Year==2016)&(YouthLiteracy$Sex=='Female'),]$Value)
mortality=read.csv('GenderStatsData/graphic1/maternal_mortality.csv',header = TRUE, sep=',')
#in 1995
mean(mortality[(mortality$Year==1995)&(mortality$Sex=='Female'),]$Value)
#in 2016
mean(mortality[(mortality$Year==2016)&(mortality$Sex=='Female'),]$Value)
max(mortality$Year)
#MATERNAL MORTALITY
mortality=read.csv('GenderStatsData/graphic1/maternal_mortality.csv',header = TRUE, sep=',')
#in 1995
mean(mortality[(mortality$Year==1995)&(mortality$Sex=='Female'),]$Value)
#in 2015
mean(mortality[(mortality$Year==2015)&(mortality$Sex=='Female'),]$Value)
#EDUCATION 25+
uppersecondary=read.csv('GenderStatsData/graphic1/education_uppersecondary_25plus.csv',header = TRUE, sep=',')
#in 1995
mean(uppersecondary[(uppersecondary$Year==1995)&(uppersecondary$Sex=='Female'),]$Value)
#in 2015
mean(uppersecondary[(uppersecondary$Year==2015)&(uppersecondary$Sex=='Female'),]$Value)
a=c()
append(a,1)
a
append(a,2)
a
print(A)
print(a)
a=append(a,1)
a
a=append(a,2,5)
a
