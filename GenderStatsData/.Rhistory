#fertility_barplotdata <- fertility_barplotdata %>% as.data.frame() %>% dplyr::arrange(fertility_barplotdata)
fertility_barplotdata$id <- seq(1, nrow(fertility_barplotdata))
# Get the name and the y position of each label
label_data <- fertility_barplotdata
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
# prepare a data frame for base lines
base_data <- fertility_barplotdata %>%
group_by(group) %>%
summarise(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
# Make the plot
tiff("test.tiff2", units="in", width=5, height=5, res=300)
ggplot(fertility_barplotdata, aes(x=as.factor(id), y=value, fill=group)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 8, xend = start, yend = 8), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 6, xend = start, yend = 6), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 4, xend = start, yend = 4), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 2, xend = start, yend = 2), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(fertility_barplotdata$id),4), y = c(2, 3,4 ,5), label = c("2", "3", "4", "5") , color="grey", size=3 , angle=0, fontface="bold") +
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
ylim(-100,120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value+10, label=Country), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) +
#hjust=hjust
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -18, label=group), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
#hjust=c(1,1,0,0),
dev.off()
plot(main_cast_final_country$fertility,main_cast_final_country$molten.flfpr)
#geographic scope of the problem
# library
library(tidyverse)
library(dplyr)
# Create dataset
fertility_melt_bycountry_lowincome= subset(fertility_melt_bycountry,fertility_melt_bycountry$Country %in% low_income_countries$Country.Name)
group=rep("A",length(fertility_melt_bycountry_lowincome[,1]))
fertility_melt_bycountry_lowincome=cbind(fertility_melt_bycountry_lowincome,group)
fertility_melt_bycountry_highincome= subset(fertility_melt_bycountry,fertility_melt_bycountry$Country %in% high_income_countries$Country.Name)
group=rep("B",length(fertility_melt_bycountry_highincome[,1]))
fertility_melt_bycountry_highincome=cbind(fertility_melt_bycountry_highincome,group)
fertility_barplotdata=rbind(fertility_melt_bycountry_lowincome,fertility_melt_bycountry_highincome)
fertility_barplotdata=fertility_barplotdata[,-c(3)]
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 3
to_add <- data.frame( matrix(NA, empty_bar*nlevels(fertility_barplotdata$group), ncol(fertility_barplotdata)) )
colnames(to_add) <- colnames(fertility_barplotdata)
to_add$group <- rep(levels(fertility_barplotdata$group), each=empty_bar)
fertility_barplotdata <- rbind(fertility_barplotdata, to_add)
#fertility_barplotdata <- fertility_barplotdata %>% as.data.frame() %>% dplyr::arrange(fertility_barplotdata)
fertility_barplotdata$id <- seq(1, nrow(fertility_barplotdata))
# Get the name and the y position of each label
label_data <- fertility_barplotdata
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
# prepare a data frame for base lines
base_data <- fertility_barplotdata %>%
group_by(group) %>%
summarise(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
# Make the plot
tiff("test.tiff2", units="in", width=5, height=5, res=300)
ggplot(fertility_barplotdata, aes(x=as.factor(id), y=value, fill=group)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 8, xend = start, yend = 8), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 6, xend = start, yend = 6), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 4, xend = start, yend = 4), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 2, xend = start, yend = 2), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(fertility_barplotdata$id),4), y = c(2, 3,4 ,5), label = c("2", "3", "4", "5") , color="grey", size=3 , angle=0, fontface="bold") +
geom_bar(aes(x=as.factor(id), y=value*10, fill=group), stat="identity", alpha=0.5) +
ylim(-100,120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value+10, label=Country), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) +
#hjust=hjust
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -18, label=group), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
#hjust=c(1,1,0,0),
dev.off()
#geographic scope of the problem
# library
library(tidyverse)
library(dplyr)
# Create dataset
fertility_melt_bycountry_lowincome= subset(fertility_melt_bycountry,fertility_melt_bycountry$Country %in% low_income_countries$Country.Name)
group=rep("A",length(fertility_melt_bycountry_lowincome[,1]))
fertility_melt_bycountry_lowincome=cbind(fertility_melt_bycountry_lowincome,group)
fertility_melt_bycountry_highincome= subset(fertility_melt_bycountry,fertility_melt_bycountry$Country %in% high_income_countries$Country.Name)
group=rep("B",length(fertility_melt_bycountry_highincome[,1]))
fertility_melt_bycountry_highincome=cbind(fertility_melt_bycountry_highincome,group)
fertility_barplotdata=rbind(fertility_melt_bycountry_lowincome,fertility_melt_bycountry_highincome)
fertility_barplotdata=fertility_barplotdata[,-c(3)]
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 3
to_add <- data.frame( matrix(NA, empty_bar*nlevels(fertility_barplotdata$group), ncol(fertility_barplotdata)) )
colnames(to_add) <- colnames(fertility_barplotdata)
to_add$group <- rep(levels(fertility_barplotdata$group), each=empty_bar)
fertility_barplotdata <- rbind(fertility_barplotdata, to_add)
#fertility_barplotdata <- fertility_barplotdata %>% as.data.frame() %>% dplyr::arrange(fertility_barplotdata)
fertility_barplotdata$id <- seq(1, nrow(fertility_barplotdata))
# Get the name and the y position of each label
label_data <- fertility_barplotdata
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
# prepare a data frame for base lines
base_data <- fertility_barplotdata %>%
group_by(group) %>%
summarise(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
# Make the plot
#tiff("test.tiff2", units="in", width=5, height=5, res=300)
ggplot(fertility_barplotdata, aes(x=as.factor(id), y=value, fill=group)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 8, xend = start, yend = 8), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 6, xend = start, yend = 6), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 4, xend = start, yend = 4), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 2, xend = start, yend = 2), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(fertility_barplotdata$id),4), y = c(2, 3,4 ,5), label = c("2", "3", "4", "5") , color="grey", size=3 , angle=0, fontface="bold") +
geom_bar(aes(x=as.factor(id), y=value*10, fill=group), stat="identity", alpha=0.5) +
ylim(-100,120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value+10, label=Country), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) +
#hjust=hjust
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -18, label=group), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
#hjust=c(1,1,0,0),
#dev.off()
#geographic scope of the problem
# library
library(tidyverse)
library(dplyr)
# Create dataset
fertility_melt_bycountry_lowincome= subset(fertility_melt_bycountry,fertility_melt_bycountry$Country %in% low_income_countries$Country.Name)
group=rep("A",length(fertility_melt_bycountry_lowincome[,1]))
fertility_melt_bycountry_lowincome=cbind(fertility_melt_bycountry_lowincome,group)
fertility_melt_bycountry_highincome= subset(fertility_melt_bycountry,fertility_melt_bycountry$Country %in% high_income_countries$Country.Name)
group=rep("B",length(fertility_melt_bycountry_highincome[,1]))
fertility_melt_bycountry_highincome=cbind(fertility_melt_bycountry_highincome,group)
fertility_barplotdata=rbind(fertility_melt_bycountry_lowincome,fertility_melt_bycountry_highincome)
fertility_barplotdata=fertility_barplotdata[,-c(3)]
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 3
to_add <- data.frame( matrix(NA, empty_bar*nlevels(fertility_barplotdata$group), ncol(fertility_barplotdata)) )
colnames(to_add) <- colnames(fertility_barplotdata)
to_add$group <- rep(levels(fertility_barplotdata$group), each=empty_bar)
fertility_barplotdata <- rbind(fertility_barplotdata, to_add)
#fertility_barplotdata <- fertility_barplotdata %>% as.data.frame() %>% dplyr::arrange(fertility_barplotdata)
fertility_barplotdata$id <- seq(1, nrow(fertility_barplotdata))
# Get the name and the y position of each label
label_data <- fertility_barplotdata
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
# prepare a data frame for base lines
base_data <- fertility_barplotdata %>%
group_by(group) %>%
summarise(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
# Make the plot
#tiff("test.tiff2", units="in", width=5, height=5, res=300)
ggplot(fertility_barplotdata, aes(x=as.factor(id), y=value, fill=group)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 8, xend = start, yend = 8), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 6, xend = start, yend = 6), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 4, xend = start, yend = 4), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 2, xend = start, yend = 2), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(fertility_barplotdata$id),4), y = c(2, 3,4 ,5), label = c("2", "3", "4", "5") , color="grey", size=3 , angle=0, fontface="bold") +
geom_bar(aes(x=as.factor(id), y=value*10, fill=group), stat="identity", alpha=0.8) +
ylim(-100,120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value+10, label=Country), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) +
#hjust=hjust
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -18, label=group), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
#hjust=c(1,1,0,0),
#dev.off()
#geographic scope of the problem
# library
library(tidyverse)
library(dplyr)
# Create dataset
fertility_melt_bycountry_lowincome= subset(fertility_melt_bycountry,fertility_melt_bycountry$Country %in% low_income_countries$Country.Name)
group=rep("A",length(fertility_melt_bycountry_lowincome[,1]))
fertility_melt_bycountry_lowincome=cbind(fertility_melt_bycountry_lowincome,group)
fertility_melt_bycountry_highincome= subset(fertility_melt_bycountry,fertility_melt_bycountry$Country %in% high_income_countries$Country.Name)
group=rep("B",length(fertility_melt_bycountry_highincome[,1]))
fertility_melt_bycountry_highincome=cbind(fertility_melt_bycountry_highincome,group)
fertility_barplotdata=rbind(fertility_melt_bycountry_lowincome,fertility_melt_bycountry_highincome)
fertility_barplotdata=fertility_barplotdata[,-c(3)]
# Set a number of 'empty bar' to add at the end of each group
empty_bar <- 3
to_add <- data.frame( matrix(NA, empty_bar*nlevels(fertility_barplotdata$group), ncol(fertility_barplotdata)) )
colnames(to_add) <- colnames(fertility_barplotdata)
to_add$group <- rep(levels(fertility_barplotdata$group), each=empty_bar)
fertility_barplotdata <- rbind(fertility_barplotdata, to_add)
#fertility_barplotdata <- fertility_barplotdata %>% as.data.frame() %>% dplyr::arrange(fertility_barplotdata)
fertility_barplotdata$id <- seq(1, nrow(fertility_barplotdata))
# Get the name and the y position of each label
label_data <- fertility_barplotdata
number_of_bar <- nrow(label_data)
angle <- 90 - 360 * (label_data$id-0.5) /number_of_bar     # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0)
label_data$hjust <- ifelse( angle < -90, 1, 0)
label_data$angle <- ifelse(angle < -90, angle+180, angle)
# prepare a data frame for base lines
base_data <- fertility_barplotdata %>%
group_by(group) %>%
summarise(start=min(id), end=max(id) - empty_bar) %>%
rowwise() %>%
mutate(title=mean(c(start, end)))
# prepare a data frame for grid (scales)
grid_data <- base_data
grid_data$end <- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1
grid_data$start <- grid_data$start - 1
grid_data <- grid_data[-1,]
# Make the plot
tiff("test.tiff3", units="in", width=5, height=5, res=300)
ggplot(fertility_barplotdata, aes(x=as.factor(id), y=value, fill=group)) +       # Note that id is a factor. If x is numeric, there is some space between the first bar
geom_bar(aes(x=as.factor(id), y=value, fill=group), stat="identity", alpha=0.5) +
# Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it.
geom_segment(data=grid_data, aes(x = end, y = 8, xend = start, yend = 8), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 6, xend = start, yend = 6), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 4, xend = start, yend = 4), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
geom_segment(data=grid_data, aes(x = end, y = 2, xend = start, yend = 2), colour = "grey", alpha=1, size=0.3 , inherit.aes = FALSE ) +
# Add text showing the value of each 100/75/50/25 lines
annotate("text", x = rep(max(fertility_barplotdata$id),4), y = c(2, 3,4 ,5), label = c("2", "3", "4", "5") , color="grey", size=3 , angle=0, fontface="bold") +
geom_bar(aes(x=as.factor(id), y=value*10, fill=group), stat="identity", alpha=0.8) +
ylim(-100,120) +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-1,4), "cm")
) +
coord_polar() +
geom_text(data=label_data, aes(x=id, y=value+10, label=Country), color="black", fontface="bold",alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) +
#hjust=hjust
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -18, label=group), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
#hjust=c(1,1,0,0),
dev.off()
plot(mean_by_year_allinds)
head(flfpr)
flfpr=melt(flfpr,id.vars = "Country.Name")
flfpr_plot=melt(flfpr,id.vars = "Country.Name")
flfpr_plot=melt(flfpr,id.vars = "Country.Name")
flfpr <- read.csv("FLFPR.csv",sep=',',header=TRUE,skip=4)
setwd("~/Documents/GitHub/dav_final/GenderStatsData")
high_income=read.csv("flfpr_highincome.csv",sep=',',header=TRUE)
low_income=read.csv("flfpr_lowincome.csv",sep=',',header=TRUE)
pop= read.csv("population_total.csv", sep=',',header=TRUE, skip = 4)
ml_length <- read.csv("ml_length.csv",sep=',',header=TRUE,skip=2)
seatprop <- read.csv("seatproportion_national.csv",sep=',',header = TRUE,skip=2)
ml_wagespaid <- read.csv("ml_wagespaid.csv",sep=',',header=TRUE,skip = 2)
genderquota <- read.csv("voluntary_genderquota_parl.csv",sep=',',header=TRUE,skip=2)
#Share of female science technology engineering and mathematics graduates at tertiary level
ger_tertiary <- read.csv("ger_tertiary.csv",sep=',',header=TRUE,skip=2)
ger_secondary <- read.csv("ger_secondary_edu.csv",sep=',',header=TRUE)
flfpr <- read.csv("FLFPR.csv",sep=',',header=TRUE,skip=4)
gdp <- read.csv("gdp.csv",sep=',',header=TRUE,skip=4)
gni <- read.csv("gni.csv",sep=',',header=TRUE,skip=4)
flfpr_plot=melt(flfpr,id.vars = "Country.Name")
View(flfpr_plot)
#why doesn't the for-loop work? doing it manually. -.-
flfpr=flfpr[,!names(flfpr) %in% drop_cols][,-c(4:42,61,62)]
flfpr=flfpr[,!names(flfpr) %in% c("X1960")]
colnames(flfpr)=c("Country.Name","2000","2001","2002","2003","2004","2005","2006","2007","2008","2009","2010","2011","2012","2013","2014","2015","2016","2017")
flfpr=flfpr[1:(length(flfpr)-1)]
View(flfpr)
setwd("~/Documents/GitHub/dav_final/GenderStatsData")
flfpr1 <- read.csv("FLFPR.csv",sep=',',header=TRUE,skip=4)
flfpr1 = flfpr1[,-drops]
setwd("~/Documents/GitHub/dav_final/GenderStatsData")
flfpr1 <- read.csv("FLFPR.csv",sep=',',header=TRUE,skip=4)
drop_cols1 <- c("Age","Location","Occupation","LowerBound","UpperBound","Unit","Indicator.Name","OriginData","NatureData","Sex","Region","Country.Code")
flfpr1=flfpr1[,!names(flfpr1) %in% drop_cols1]
View(flfpr1)
drop_cols1 <- c("Age","Location","Occupation","LowerBound","UpperBound","Unit","Indicator.Name","OriginData","NatureData","Sex","Region","Country.Code","Indicator.Code")
flfpr1=flfpr1[,!names(flfpr1) %in% drop_cols1]
flfpr1=flfpr1[,!names(flfpr1) %in% drop_cols1][,2:30]
setwd("~/Documents/GitHub/dav_final/GenderStatsData")
flfpr1 <- read.csv("FLFPR.csv",sep=',',header=TRUE,skip=4)
drop_cols1 <- c("Age","Location","Occupation","LowerBound","UpperBound","Unit","Indicator.Name","OriginData","NatureData","Sex","Region","Country.Code","Indicator.Code")
flfpr1=flfpr1[,!names(flfpr1) %in% drop_cols1][,-c(2:30)]
flfpr1_melt=melt(flfpr1,id.vars = c("Country.Code"))
flfpr1_melt=melt(flfpr1,id.vars = c("Country.Name"))
View(flfpr1_melt)
setwd("~/Documents/GitHub/dav_final/GenderStatsData")
flfpr1 <- read.csv("FLFPR.csv",sep=',',header=TRUE,skip=4)
drop_cols1 <- c("Age","Location","Occupation","LowerBound","UpperBound","Unit","Indicator.Name","OriginData","NatureData","Sex","Region","Country.Code","Indicator.Code")
flfpr1=flfpr1[,!names(flfpr1) %in% drop_cols1][,-c(2:30)]
flfpr1=flfpr1[,-c(2)]
flfpr1_melt=melt(flfpr1,id.vars = c("Country.Name"))
flfpr1_cast=dcast(flfpr1_melt,Country.Name~variable,fun.aggregate = mean)
View(flfpr1_cast)
View(flfpr1_melt)
flfpr1_final=aggregate(flfpr1_melt[3], list(flfpr1_melt$variable), mean,na.rm=TRUE, na.action=NULL)
View(flfpr1_final)
View(flfpr)
View(mean_by_country_cast)
View(mean_by_year_allinds)
View(mean_by_year)
View(mean_by_year_notnorm_final)
setwd("~/Documents/GitHub/dav_final/GenderStatsData")
high_income=read.csv("flfpr_highincome.csv",sep=',',header=TRUE)
low_income=read.csv("flfpr_lowincome.csv",sep=',',header=TRUE)
pop= read.csv("population_total.csv", sep=',',header=TRUE, skip = 4)
ml_length <- read.csv("ml_length.csv",sep=',',header=TRUE,skip=2)
seatprop <- read.csv("seatproportion_national.csv",sep=',',header = TRUE,skip=2)
ml_wagespaid <- read.csv("ml_wagespaid.csv",sep=',',header=TRUE,skip = 2)
genderquota <- read.csv("voluntary_genderquota_parl.csv",sep=',',header=TRUE,skip=2)
#Share of female science technology engineering and mathematics graduates at tertiary level
ger_tertiary <- read.csv("ger_tertiary.csv",sep=',',header=TRUE,skip=2)
ger_secondary <- read.csv("ger_secondary_edu.csv",sep=',',header=TRUE)
flfpr <- read.csv("FLFPR.csv",sep=',',header=TRUE,skip=4)
gdp <- read.csv("gdp.csv",sep=',',header=TRUE,skip=4)
gni <- read.csv("gni.csv",sep=',',header=TRUE,skip=4)
head(gdp)
head(gdp)
head(ml_length)
View(main_cast_final)
View(mean_by_year_allinds)
View(mean_by_country)
##### HIGH INCOME ##########
library(rjags)
# Normalized datasets
flfpr_rj <- mean_by_year_high_final$flfpr
seatprop_rj <- mean_by_year_high_final$seatprop
gdp_rj <- mean_by_year_high_final$gdp
fertility_rj <- mean_by_year_high_final$fertility
n <- nrow(mean_by_year_high_final)
# JAGS Little Language
model_string <- "model{
# Likelihood
for(i in 1:n){
mu1[i] <- beta1 + beta2*seatprop_rj[i] + beta3*gdp_rj[i] + beta4*fertility_rj[i]
flfpr_rj[i]   ~ dnorm(mu1[i],inv.var1)
}
# Prior for beta
beta1 ~ dnorm(0,0.01)
beta2 ~ dnorm(0,0.01)
beta3 ~ dnorm(0,0.01)
beta4 ~ dnorm(0,0.01)
#beta5 ~ dnorm(0,0.01)
# Prior for the inverse variance
var1   ~ dunif(0.01, 0.99)
var2   ~ dunif(0.01, 0.99)
var3   ~ dunif(0.01, 0.99)
var4   ~ dunif(0.01, 0.99)
#var5   ~ dunif(0.01, 0.99)
inv.var1   <- 1/var1
inv.var2   <- 1/var2
inv.var3   <- 1/var3
inv.var4   <- 1/var4
#inv.var5   <- 1/var5
sigma1     <- sqrt(var1)
sigma2     <- sqrt(var2)
sigma3     <- sqrt(var3)
sigma4     <- sqrt(var4)
#sigma5     <- sqrt(var5)
}"
model <- jags.model(textConnection(model_string), data = list(flfpr_rj=flfpr_rj, seatprop_rj=seatprop_rj, gdp_rj=gdp_rj, fertility_rj=fertility_rj, n=n), n.chains = 4)
update(model, 10000, progress.bar="none"); # Burn-in for 10000 samples
samp <- coda.samples(model,
variable.names=c("beta1","beta2","beta3", "beta4", "sigma1", "sigma2", "sigma3","sigma4"),
n.iter=20000, progress.bar="text")
summary(samp)
traceplot(samp)
# sometimes the gelman plot won't fit on a screen
# we have to reduce the margins
par(mar=c(.4,.4,.4,.4))
gelman.plot(samp)
densplot(samp)
acfplot(samp)
# get the effective sample size
effectiveSize(samp)
saveRDS(samp, "flfpr_fork_highincome_final.RDS")
##### LOW INCOME ##########
library(rjags)
# Normalized datasets
flfpr_rj <- mean_by_year_low_final$flfpr
seatprop_rj <- mean_by_year_low_final$seatprop
ger_secondary_rj <- mean_by_year_low_final$ger_secondary
gdp_rj <- mean_by_year_low_final$gdp
fertility_rj <- mean_by_year_low_final$fertility
n <- nrow(mean_by_year_low_final)
# JAGS Little Language
model_string <- "model{
# Likelihood
for(i in 1:n){
mu1[i] <- beta1 + beta2*seatprop_rj[i] + beta3*ger_secondary_rj[i] + beta4*gdp_rj[i]+ beta5*fertility_rj[i]
flfpr_rj[i]   ~ dnorm(mu1[i],inv.var1)
}
# Prior for beta
beta1 ~ dnorm(0,0.01)
beta2 ~ dnorm(0,0.01)
beta3 ~ dnorm(0,0.01)
beta4 ~ dnorm(0,0.01)
beta5 ~ dnorm(0,0.01)
#beta6 ~ dnorm(0,0.01)
# Prior for the inverse variance
var1   ~ dunif(0.01, 0.99)
var2   ~ dunif(0.01, 0.99)
var3   ~ dunif(0.01, 0.99)
var4   ~ dunif(0.01, 0.99)
var5   ~ dunif(0.01, 0.99)
#var6   ~ dunif(0.01, 0.99)
inv.var1   <- 1/var1
inv.var2   <- 1/var2
inv.var3   <- 1/var3
inv.var4   <- 1/var4
inv.var5   <- 1/var5
#inv.var6   <- 1/var6
sigma1     <- sqrt(var1)
sigma2     <- sqrt(var2)
sigma3     <- sqrt(var3)
sigma4     <- sqrt(var4)
sigma5     <- sqrt(var5)
#sigma6     <- sqrt(var6)
}"
model <- jags.model(textConnection(model_string), data = list(flfpr_rj=flfpr_rj, seatprop_rj=seatprop_rj, gdp_rj=gdp_rj,ger_secondary_rj=ger_secondary_rj,fertility_rj=fertility_rj ,n=n), n.chains = 5)
update(model, 10000, progress.bar="none"); # Burn-in for 10000 samples
samp <- coda.samples(model,
variable.names=c("beta1","beta2","beta3", "beta4","beta5", "sigma1", "sigma2", "sigma3","sigma4","sigma5"),
n.iter=20000, progress.bar="text")
summary(samp)
traceplot(samp)
# sometimes the gelman plot won't fit on a screen
# we have to reduce the margins
par(mar=c(.4,.4,.4,.4))
gelman.plot(samp)
densplot(samp)
acfplot(samp)
# get the effective sample size
effectiveSize(samp)
saveRDS(samp, "flfpr_fork_lowincome_final.RDS")
